"use strict";

const url = window.location;

let renderEl = null
const config = {
    defaultElRenderName: "<%- config.defaultElRenderName %>",
    render: "<%- config.render %>",
    theme: "<%- config.theme %>",
    width: "<%- config.width %>",
    height: "<%- config.height %>",
    rootUrl: "<%- config.rootUrl %>",
    onloadCallback: "<%- config.onloadCallback %>",
    onsuccessCallback: "<%- config.onsuccessCallback %>",
    onerrorCallback: "<%- config.onerrorCallback %>"
}

let rendered = false
let msgListeners = []

const nanodrop = {
    account: null,
    setAccount: function(account){
        if (account === null || isNanoAddress(account)) {
            nanodrop.account = account
            if (nanodrop.rendered) {
                renderEl.dataset.account = account
                document.getElementById('nanoDropCheckbox').contentWindow.postMessage({
                    from: "host",
                    target: "checkbox",
                    action: "change",
                    account: account
                }, '*')
            }
            return "ok"
        } else {
            return "invalid account"
        }
    },
    rendered: false,
    render: function (domElName, options = false) {
        return new Promise((resolve, reject) => {
            
            // Check if dom element exists
            renderEl = document.getElementById(domElName)
            if (typeof(renderEl) == 'undefined' || renderEl == null) return reject("element id not exists")

            // Validate and set options params
            let params = ""
            function addParam(key, val){
                if (params.length == 0) {
                    params = '?'
                } else {
                    params += '&'
                }
                params += key + '=' + val
            }
            if (options !== false){
                if (typeof(options) === "object"){
                    if ("theme" in options) {
                        if (options.theme == "light" || options.theme == "dark") {
                            addParam("theme", options.theme)
                        } else {
                            return reject("invalid theme")
                        }
                    }
                    if ("account" in options) {
                        if (isNanoAddress(options.account)) {
                            addParam("account", options.account)
                        } else {
                            return reject("invalid nano account")
                        }
                    }
                } else {
                    return reject("invalid options, not an object")
                }
            }

            // Loads checkbox iframe 
            renderEl.innerHTML = ' \
            <iframe id="nanoDropCheckbox" src="' + config.rootUrl + '/api/checkbox' + params + '" \
                width="' + config.width + '" height="' + config.height + '" \
                style="position: relative; border: 0"> \
            </iframe>'
            
            // If checkframe not loads until 60 seconds, return error (reject)
            setTimeout(function () {
                if (!nanodrop.rendered) return reject("NanoDrop Checkbox loading failed")
            }, 60000);

            msgListeners.push(function(e){
                if( "from" in e.data && e.data.from == "checkbox"
                    && "loaded" in e.data && e.data.loaded == "checkbox"
                ) {
                    resolve("success")
                } else if ("loaded" in e.data && e.data.loaded == false){
                    reject(e.data.error)
                }
            })
        })
    },
    changeTheme: function (theme) {
        if (theme == 'dark'){
            document.getElementById('nanoDropCheckbox').contentWindow.postMessage({
                from: "host",
                target: "checkbox",
                action: "change",
                theme: "dark"
            }, '*')
        } else if (theme == 'light') {
            document.getElementById('nanoDropCheckbox').contentWindow.postMessage({
                from: "host",
                target: "checkbox",
                action: "change",
                theme: "light"
            }, '*')
        } else {
            console.error("ChangeTheme error, invalid theme: " + theme)
        }
    }
}

//Sometimes we need to wait for a response before deleting the iframe
function resetIframe(id){
    document.getElementById(id).remove()
}

function isNanoAddress(address) {
    return /^(xrb_|nano_)[13][13-9a-km-uw-z]{59}$/.test(address)
}

function displayChallenge(){
    document.getElementById("nanodrop_hidden_content").innerHTML += '<iframe id="nanoDrop_challenge" src="<%= config.rootUrl %>/api/challenge" width="100%" height="100%" style="position: fixed; top: 0; left: 0; z-index: 10000000; border: 0"></iframe>'
}

function displayOAuth(){
    document.getElementById("nanodrop_hidden_content").innerHTML += '<iframe id="nanoDrop_oAuth" src="<%= config.rootUrl %>/api/oauth" width="100%" height="100%" style="position: fixed; top: 0; left: 0; z-index: 10000000; border: 0"></iframe>'
}

function hostnameFromUrl(url){
    return new URL(url).hostname
}

function listenMessages(){
    window.onmessage = function (e) {
        msgListeners.forEach(listener => listener(e))
        if (hostnameFromUrl(e.origin) == hostnameFromUrl('<%= config.rootUrl %>') && typeof (e.data) == "object" && "from" in e.data) {
            if ( "target" in e.data && e.data.target == "checkbox") {
                document.getElementById('nanoDropCheckbox').contentWindow.postMessage(e.data, '*')
                
                if (e.data.from == "challenge") {
                    if ("success" in e.data && e.data.success === true) {
                        resetIframe("nanoDrop_challenge")
                    } else if ("success" in e.data && e.data.success === false) {
                        resetIframe("nanoDrop_challenge")
                    }
                } else if (e.data.from == "oauth") {
                    if ("success" in e.data && e.data.success === true) {
                        resetIframe("nanoDrop_oAuth")
                    } else if ("success" in e.data && e.data.success === false){
                        resetIframe("nanoDrop_oAuth")
                    }
                }
            } else if (e.data.from == "checkbox") {
                if ("action" in e.data) {
                    if (e.data.action == "challenge") {
                        displayChallenge()
                    } else if (e.data.action == "oauth"){
                        displayOAuth()
                    }
                } else if("loaded" in e.data && e.data.loaded == "checkbox") {
                    nanodrop.rendered = true, rendered = true
                } else if ("loaded" in e.data && e.data.loaded === false){
                    nanodrop.rendered = false
                } else if ("success" in e.data && e.data.success === true) {
                    if (config.onsuccessCallback !== null && config.onsuccessCallback != "") {
                        if (window[config.onsuccessCallback] == undefined) {
                            alert("onsuccessCallback '" + config.onsuccessCallback + "' does not exist")
                        } else {
                            if (typeof(window[config.onsuccessCallback]) === "function"){
                                window[config.onsuccessCallback](e.data);
                            } else {
                                alert("onsuccessCallback '" + config.onsuccessCallback + "' is not a function")
                            }
                        }
                    }
                } else if ("success" in e.data && e.data.success == false){
                    if (config.onerrorCallback !== null && config.onerrorCallback != "") {
                        if (window[config.onerrorCallback] === undefined) {
                            alert("onerrorCallback '" + config.onerrorCallback + "' does not exist")
                        } else {
                            if (typeof(window[config.onerrorCallback]) === "function"){
                                window[config.onerrorCallback](e.data);
                            } else {
                                alert("onerrorCallback '" + config.onerrorCallback + "' is not a function")
                            }
                        }
                    }
                }
            }
        }
    }
}

//auto init
window.onload=function (){

    window.dispatchEvent(new CustomEvent("nanodropOnload", {detail: { nanodrop } }))

    window.isTop = true;

    listenMessages()

    if (typeof(document.getElementById("nanodrop_hidden_content")) != 'undefined' && document.getElementById("nanodrop_hidden") != null) {
        alert('NanoDrop API Error: "#nanodrop_hidden_content" element already exists! Please remove this element from your code')
    } else {
        const hidden_content = document.createElement("div")
        hidden_content.id = "nanodrop_hidden_content"
        hidden_content.style.width = "0"
        hidden_content.style.height = "0"
        document.body.appendChild(hidden_content)
    }

    
    if (config.render != "explicit") {
        renderEl = document.getElementById(config.defaultElRenderName)
        if (typeof(renderEl) != 'undefined' && renderEl != null) {
            nanodrop.render(config.defaultElRenderName)
                .then((res) => {
                    if ("account" in renderEl.dataset){
                        if(isNanoAddress(renderEl.dataset.account)){
                            nanodrop.account = renderEl.dataset.account
                        } else {
                         alert("NanoDrop Error: invalid nano account in data-account")   
                        }
                    }
                    if (config.onloadCallback !== null && config.onloadCallback != "") {
                        if (window[config.onloadCallback] == undefined) {
                            alert("onloadCallback '" + config.onloadCallback + "' does not exist")
                        } else {
                            if (typeof(window[config.onloadCallback]) === "function"){
                                window[config.onloadCallback]();
                            } else {
                                alert("onloadCallback '" + config.onloadCallback + "' is not a function")
                            }
                        }
                    }
                })
                .catch((err) => {
                    alert(err)
                })
        }
    }

}

