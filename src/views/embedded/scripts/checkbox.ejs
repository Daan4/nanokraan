<script>

    let ticket = "", dropAmount = "some", account = null

    function postJson(url, json = {}) {
        return new Promise((resolve, reject) => {
            fetch(url, {
                method: 'POST',
                body: JSON.stringify(json)
            }).then(function (response) {
                var contentType = response.headers.get("content-type");
                if (contentType && contentType.indexOf("application/json") !== -1) {
                    return response.json().then(function (json) {
                        resolve(json)
                    });
                } else {
                    reject({ error: "Oops, we haven't got JSON!" })
                }
            }).catch((err) => {
                reject(err)
            });
        })
    }

    function isNanoAddress(address) {
        return /^(xrb_|nano_)[13][13-9a-km-uw-z]{59}$/.test(address)
    }

    // Little hack to play audio without loosing permissions in mobile browsers like Safari
    let play_status = null
    async function playSound(status = "pending") {
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        if (status == 'pending') {
            let audio = new Audio('/assets/drip.mp3');
            while (true) {
                if (play_status == "confirm") {
                    audio.play()
                    play_status = null
                    return
                } else {
                    await sleep(100)
                }
            }
        } else {
            play_status = "confirm"
        }
    }

    function checkboxLoader() {
        document.querySelector(".recaptcha-checkbox-border").style.display = "none"
        const checkboxSpinner = document.querySelector(".recaptcha-checkbox-spinner")
        checkboxSpinner.style.display = "block"
        checkboxSpinner.style.animationPlayState = "running"
        checkboxSpinner.style.opacity = 1
    }

    function checkboxStopLoader() {
        const checkboxSpinner = document.querySelector(".recaptcha-checkbox-spinner")
        checkboxSpinner.style.display = "none"
        checkboxSpinner.style.animationPlayState = "paused"
        checkboxSpinner.style.opacity = 0
    }

    function checkboxReset() {
        checkboxStopLoader()
        document.querySelector(".recaptcha-checkbox-checkmark").classList.remove("animate")
        document.querySelector(".checkbox-error").classList.remove("animate")
        document.querySelector(".recaptcha-checkbox-border").style.display = "block"
        document.getElementById("recaptcha-anchor-label").innerHTML = '<span aria-live="polite" aria-labelledby="recaptcha-accessible-status"></span>\
            Drop Me <span id="drop-amount">some</span>\
            Nano</label>'
        document.querySelector(".nd-anchor-footer").innerHTML = '<div class="nd-anchor-logo-portrait" aria-hidden="true" role="presentation">\
            <div class="nd-anchor-logo-img nd-anchor-logo-img-portrait"></div>\
            <div class="nd-anchor-logo-text">NanoDrop.io</div> \
            <div class="nd-anchor-logo-text-refresh">Refresh</div> \
            <div class="nd-anchor-logo-text-refreshing">Refreshing...</div> \
        </div>'
        document.querySelector("#drop-amount").innerText = dropAmount
    }

    function checkboxSuccess(data) {
        playSound("confirm")
        checkboxReset()
        document.querySelector(".recaptcha-checkbox-border").style.display = "none"
        document.getElementById("recaptcha-anchor-label").innerText = "Dropped " + dropAmount + " Nano"
        document.querySelector(".nd-anchor-logo-portrait").innerHTML = '<a href="<%= config.block_explorer %>' + data.hash + '" target="_blank" class="block-explorer-link"> \
            <span>\
                <svg style="fill: #337ab7; width: 20px; height: 20px;" height="512pt" viewBox="0 0 512 512.0015" width="512pt" xmlns="http://www.w3.org/2000/svg"><path d="m220.769531 376.726562-47.066406 47.066407c-23.570313 23.570312-61.921875 23.578125-85.503906 0-23.566407-23.570313-23.558594-61.921875.011719-85.492188l94.503906-94.503906c21.839844-21.839844 56.378906-23.453125 80.078125-4.816406 1.875 1.472656 3.683593 3.078125 5.414062 4.808593 10.496094 10.492188 26.769531 10.664063 37.046875.382813l29.617188-29.617187c-4.867188-7.386719-10.492188-14.277344-16.824219-20.609376-8.925781-8.921874-18.824219-16.292968-29.371094-22.09375-41.265625-22.761718-92.300781-21.625-132.601562 3.40625-8.371094 5.199219-16.289063 11.429688-23.554688 18.699219l-94.152343 94.152344c-51.152344 51.152344-51.152344 134.378906-.007813 185.527344 51.15625 51.152343 134.378906 51.152343 185.535156 0l84.699219-84.699219c-29.585938 3.914062-60.039062-.148438-87.824219-12.210938zm0 0"/><path d="m473.636719 38.359375c-51.148438-51.148437-134.371094-51.148437-185.527344.007813l-84.691406 84.691406c29.585937-3.917969 60.039062.144531 87.824219 12.210937l47.070312-47.070312c23.570312-23.570313 61.914062-23.570313 85.484375 0 23.578125 23.578125 23.578125 61.921875.007813 85.492187l-94.515626 94.515625c-21.597656 21.597657-55.875 23.089844-79.546874 4.542969-1.9375-1.503906-3.789063-3.148438-5.566407-4.925781-10.320312-10.320313-27.105469-10.3125-37.425781.007812l-29.617188 29.617188c4.871094 7.371093 10.503907 14.269531 16.824219 20.589843 8.988281 8.988282 18.972657 16.394532 29.59375 22.226563 41.492188 22.777344 92.785157 21.445313 133.113281-3.980469 8.101563-5.105468 15.769532-11.1875 22.816407-18.238281l94.15625-94.152344c51.152343-51.15625 51.152343-134.378906 0-185.535156zm0 0"/></svg>\
            </span> \
            <div class="nd-anchor-explorer-text"> Block Explorer</div></a>'
        document.querySelector(".recaptcha-checkbox-checkmark").classList.add("animate")
    }

    function checkboxError(err, title = 'Error') {
        console.error(err)
        if (err == "recaptcha window has been closed") return checkboxReset()
        checkboxReset()
        if (typeof (err) == "object") {
            "error" in err ? err = err.error : err = JSON.stringify(err)
        }
        document.querySelector(".recaptcha-checkbox-border").style.display = "none"
        document.querySelector(".checkbox-error").classList.add("animate")
        document.getElementById("recaptcha-anchor-label").innerText = title
        document.getElementById("recaptcha-anchor-label").innerHTML += '<span class="error"></span>'
        document.getElementById("recaptcha-anchor-label").querySelector("span").innerText = err
    }

    let listeners = []
    function addListener(callback) {
        if (!listeners.includes(callback)) listeners.push(callback)
    }
    function removeListener(callback) {
        listeners.splice(listeners.indexOf(callback), 1)
    }

    function onMessage() {
        window.onmessage = function (e) {
            if (typeof (e.data) == "object" && "target" in e.data && e.data.target == "checkbox" && "from" in e.data) {
                listeners.forEach(listener => listener(e))
            }
        }
    }

    function msgListener() {
        addListener(function (e) {
            if (e.data.from == "challenge") {
                if ("success" in e.data && e.data.success == true) {
                    dropMe(e.data)
                } else if ("success" in e.data && e.data.success == false) {
                    checkboxError(e.data.error)
                }
            }

            else

                if (e.data.from == "host") {
                    if ("action" in e.data) {
                        if (e.data.action == "change") {
                            if ("theme" in e.data) {
                                if (e.data.theme == "dark") {
                                    document.getElementById("nd-anchor-container").classList.remove("nd-anchor-light")
                                    document.getElementById("nd-anchor-container").classList.add("nd-anchor-dark")
                                } else if (e.data.theme == "light") {
                                    document.getElementById("nd-anchor-container").classList.remove("nd-anchor-dark")
                                    document.getElementById("nd-anchor-container").classList.add("nd-anchor-light")
                                }
                            } else if ("account" in e.data) {
                                if (e.data.account === null || isNanoAddress(e.data.account)) {
                                    if (e.data.account !== null) checkboxReset()
                                    account = e.data.account
                                } else {
                                    checkboxError("invalid nano account")
                                }
                            }
                        } else {
                            console.error("Iframe message error: action '" + e.data.action + "' invalid")
                        }

                    } else {
                        console.error("Iframe message error: 'action' missing")
                    }
                }
        })
    }

    function dropMe(data) {

        try {

            let dataPost = {
                account: account,
                ticket: ticket
            }

            if ("ticket" in data) dataPost.ticket = data.ticket

            if ("oauth_token" in data) {
                dataPost.oauth_token = data.oauth_token
                if (!("email" in data) || !data.email.includes("@")) return checkboxError("email key missing")
                dataPost.email = data.email
            } else {
                dataPost.recaptchaV2_token = data.recaptchaV2_token,
                    dataPost.recaptchaV3_token = data.recaptchaV3_token
            }

            postJson("/api/drop", dataPost)
                .then((res) => {
                    if ("success" in res && res.success == true) {
                        checkboxSuccess(res)
                        window.top.postMessage({ from: "checkbox", success: true, hash: res.hash, amount: res.amount }, '*')
                    } else if ("success" in res && res.success == false) {
                        if (typeof (res.error) === "string" && (res.error.includes("low score") || res.error.includes("proxy detected"))) {
                            window.top.postMessage({ from: "checkbox", action: "oauth" }, '*')
                            addListener(function (e) {
                                if (e.data.from == "oauth") {
                                    if ("success" in e.data && e.data.success == true) {
                                        dropMe({
                                            account: dataPost.account,
                                            amount: dataPost.amount,
                                            ticket: res.ticket,
                                            email: e.data.email,
                                            oauth_token: e.data.oauth_token
                                        })
                                    } else if ("success" in e.data && e.data.success == false) {
                                        checkboxError(e.data.error)
                                    }
                                    removeListener(this)
                                }
                            })
                        } else {
                            checkboxError(res.error)
                            window.top.postMessage({ from: "checkbox", success: false, error: res.error }, '*')
                        }
                    } else if ("error" in res) {
                        checkboxError(JSON.stringify(res.error).slice(0, 40))
                        window.top.postMessage({ from: "checkbox", success: false, error: res.error }, '*')
                    } else {
                        checkboxError("Invalid response from server")
                        window.top.postMessage({ from: "checkbox", success: false, error: "Invalid response from server" }, '*')
                    }
                })
                .catch((err) => {
                    checkboxError(err)
                    window.top.postMessage({ from: "checkbox", success: false, error: err }, '*')
                })

        } catch (err) {
            checkboxError(err)
            window.top.postMessage({ from: "checkbox", success: false, error: err }, '*')
        }
    }

    let challengeLoading = false
    function enableCheckbox() {
        const recaptcha_content = document.getElementById("nd-anchor-container").querySelector(".nd-anchor-content")
        recaptcha_content.addEventListener("click", function (e) {
            if (e.isTrusted && !challengeLoading) {
                checkboxReset()
                playSound("pending")
                if (account === null) {
                    checkboxError("missing nano account")
                    setTimeout(function () {
                        checkboxReset()
                    }, 5000)
                } else {
                    challengeLoading = true
                    checkboxLoader()
                    setTimeout(function () {
                        window.top.postMessage({ from: "checkbox", action: "challenge" }, '*')
                        addListener((e) => {
                            if ("loaded" in e.data && e.data.loaded == "challenge") challengeLoading = false
                        })
                    }, 200)
                }
            }
        })

    }

    function getTicket() {
        return new Promise((resolve, reject) => {
            postJson('/api/ticket', {
                action: "create"
            })
                .then((res) => {
                    ticket = res.ticket
                    dropAmount = res.megaAmount
                    checkboxReset()
                    if (dropAmount == 0 || dropAmount == "0") {
                        checkboxError("no funds")
                        reject("no funds")
                    } else {
                        document.getElementById("drop-amount").innerText = dropAmount
                        enableCheckbox()
                        resolve(res)
                    }
                })
                .catch((err) => {
                    checkboxError(err, "TicketAPI  Error")
                    reject(err)
                })
        })
    }

    function refreshCheckbox(e) {
        if (e.isTrusted) {
            const checkboxFooter = document.querySelector("#nd-anchor-container .nd-anchor-footer")
            checkboxFooter.removeEventListener('click', refreshCheckbox, false);
            document.getElementById("nd-anchor-container").classList.remove("checkbox-refresh")
            document.getElementById("nd-anchor-container").classList.add("checkbox-refreshing")
            getTicket()
                .then((res) => {
                    document.getElementById("nd-anchor-container").classList.remove("checkbox-refreshing")
                    msgListener()
                    onMessage()
                    window.top.postMessage({ from: "checkbox", loaded: "checkbox" }, '*')
                })
                .catch((err) => {
                    document.getElementById("nd-anchor-container").classList.remove("checkbox-refreshing")
                    document.getElementById("nd-anchor-container").classList.add("checkbox-refresh")
                    checkboxFooter.addEventListener("click", refreshCheckbox, false)
                })
        }

    }

    function initCheckbox() {
        document.body.style.opacity = 1
        if (!checkPermission()) {
            checkboxError("Require access at: <%= config.contact %>", "Access Denied")
        } else {
            getTicket()
                .then((res) => {
                    msgListener()
                    onMessage()
                    window.top.postMessage({ from: "checkbox", loaded: "checkbox" }, '*')
                })
                .catch((err) => {
                    document.getElementById("nd-anchor-container").classList.add("checkbox-refresh")
                    const checkboxFooter = document.querySelector("#nd-anchor-container .nd-anchor-footer")
                    checkboxFooter.addEventListener("click", refreshCheckbox, false)
                })
        }
    }

    window.onload = initCheckbox()

</script>